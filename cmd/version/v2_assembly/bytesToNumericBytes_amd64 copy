#include "textflag.h"

TEXT Â·BytesToNumericBytes(SB), NOSPLIT, $0
    MOVQ    len+8(FP), CX            // Load the length of the byte slice into CX
    MOVQ    b+0(FP), DX              // Load the pointer to the byte slice into DX
    MOVQ    DX, SI                   // SI will be our destination pointer for valid bytes
    XORQ    AX, AX                   // Clear AX to indicate no errors

    MOVQ    $0, BX                   // Set initial state to q0

main_loop:
    CMPQ    CX, $0                   // Check if the length is 0
    JLE     accept                   // If it is, we are done

    // Load the next state based on the value in BX
    CMPQ    BX, $0                   // If BX == 0, jump to q0
    JE      q0
    CMPQ    BX, $1                   // If BX == 1, jump to q1
    JE      q1
    CMPQ    BX, $2                   // If BX == 2, jump to q2
    JE      q2
    CMPQ    BX, $3                   // If BX == 3, jump to q3
    JE      q3
    CMPQ    BX, $4                   // If BX == 4, jump to q3
    JE      q4
    CMPQ    BX, $5                   // If BX == 5, jump to q4
    JE      q5
    CMPQ    BX, $6                   // If BX == 6, jump to q6
    JE      q6
    CMPQ    BX, $7                   // If BX == 7, jump to q7
    JE      q7
    
    JMP     error                    // If we get here, we are in an invalid state

// State q0
q0:
    MOVB    (DX), AL                 // Load the current byte into AL
    
    CMPB    AL, $'1'                 // Check if AL is '1'
    JL      less_than_one         // If less than '1', jump to greater_than_one

    CMPB    AL, $'9'                 // Check if AL is greater than '9'
    JG      error                    // If greater than '9', jump to error

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $1, BX                   // Set state to q1
    JMP     process                  // Process the character

    less_than_one:
    CMPB    AL, $'0'                 // Check if AL is '0'
    JNE     char_sign                // If less than '0', jump to less_than_zero

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    JMP     set_state_q3             // Jump to q3

    char_sign:
    CMPB    AL, $'-'                 // Check if AL is '-'
    JE      set_state_q2             // If equal, jump to q2

    CMPB    AL, $'+'                 // Check if AL is '+'
    JE      set_state_q2             // If equal, jump to q2

    JMP     error                    // If we get here, we are in an invalid state

set_state_q2:
    MOVQ    $2, BX                   // Set state to q2
    JMP     process                  // Process the character

set_state_q3:
    MOVQ    $3, BX                   // Set state to q3
    JMP     process                  // Process the '.' character

// State q1
q1:
    MOVB    (DX), AL                 // Load the next byte

    CMPB    AL, $'.'                 // Check if it's a decimal point
    JE      set_state_q4             // Jump to q3 if it is

    CMPB    AL, $'0'                 // Compare AL to '0'
    JL      error                    // If less than '0', jump to error

    CMPB    AL, $'9'                 // Compare AL to '9'
    JG      error                    // If greater than '9', jump to error
    
    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $1, BX                   // Stay in state q1
    JMP     process                  // Process the character

set_state_q4:
    MOVQ    $4, BX                   // Set state to q4
    JMP     process                  // Process the character


// State q2
q2:
    MOVB    (DX), AL                 // Load the next byte

    CMPB    AL, $'0'                 // Compare AL to '0'
    JL      error                    // If less than '0', jump to error

    CMPB    AL, $'9'                 // Check if AL is greater than '9'
    JG      error                    // If greater than '9', jump to error

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $1, BX                   // Set state to q1
    JMP     process                  // Process the character
    
// State q3
q3:
    MOVB    (DX), AL                 // Load the next byte

    
// State q4
q4:
    MOVB    (DX), AL                 // Load the next byte
    CMPB    AL, $'0'                 // Check if AL is '0'
    JE      set_state_q5             // Jump to q5 if it is

    CMPB    AL, $'9'                 // Check if AL is greater than '9'
    JG      error                    // If greater than '9', jump to error

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $5, BX                   // Set state to q5
    JMP     process                  // Process the character

set_state_q5:
    MOVQ    $5, BX                   // Set state to q5
    JMP     process                  // Process the character

// State q4
q4:
    MOVB    (DX), AL                 // Load the next byte
    CMPB    AL, $'0'                 // Check if AL is '0'
    JE      set_state_q5             // Jump to q5 if it is

    CMPB    AL, $'9'                 // Check if AL is greater than '9'
    JG      error                    // If greater than '9', jump to error

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $4, BX                   // Stay in state q4
    JMP     process                  // Process the character

// State q5
q5:
    MOVB    (DX), AL                 // Load the next byte
    CMPB    AL, $'0'                 // Check if AL is '0'
    JE      q5                       // Stay in state q5 if it is

    CMPB    AL, $'9'                 // Check if AL is greater than '9'
    JG      error                    // If greater, jump to error

    SUBB    $'0', AL                 // Subtract '0' from AL to get the numeric value
    MOVQ    $4, BX                   // Set state to q4
    JMP     process                  // Process the character

// Common Processing Code
process:
    MOVB    AL, (SI)                 // Copy the valid character to the current SI position
    INCQ    SI                       // Increment the destination pointer
    INCQ    DX                       // Increment the source pointer
    DECQ    CX                       // Decrement the length
    JMP     main_loop                // Jump back to main loop

// Accept state
accept:
    // if the length is greater than 0, update the last byte to be a null byte
    CMPQ    CX, $0                   // Check if the length is 0
    JLE     done                     // If it is, we are done
    MOVB    $0, (SI)                 // Copy a null byte to the current SI position
    INCQ    SI                       // Increment the destination pointer
    JMP     accept                   // Jump back to accept

done:
    RET

// Error state
error:
    XORQ    AX, AX                   // Clear AX to indicate error
    MOVB    $0, (SI)                 // Copy a null byte to the current SI position
    RET
