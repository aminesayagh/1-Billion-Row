#include "textflag.h"

TEXT Â·BytesToNumericBytes(SB), NOSPLIT, $0
    // Register Usage:
    // CX: Length of the input byte slice
    // DX: Pointer to the current byte in the input slice
    // SI: Pointer to the output buffer for valid bytes
    // BX: Current state of the automaton
    // AX: Error code

    MOVQ    len+8(FP), CX            // Load the length of the byte slice into CX
    MOVQ    b+0(FP), DX              // Load the pointer to the byte slice into DX
    MOVQ    o+16(FP), SI             // Load the pointer to the output buffer into SI
    XORQ    AX, AX                   // Clear AX to indicate no errors

    MOVQ    $0, BX                   // Set initial state to q0

main_loop:
    CMPQ    BX, $0                   // If BX == 0, jump to q0
    JE      q0
    CMPQ    BX, $3                   // If BX == 3, jump to q3
    JE      q3
    CMPQ    BX, $1                   // If BX == 1, jump to q1
    JE      q1
    CMPQ    BX, $4                   // If BX == 4, jump to q4
    JE      q4
    CMPQ    BX, $6                   // If BX == 6, jump to q6
    JE      q6
    CMPQ    BX, $5                   // If BX == 5, jump to q5
    JE      q5
    CMPQ    BX, $2                   // If BX == 2, jump to q2
    JE      q2

    JMP     error_invalid_state      // If in an invalid state, jump to error

// State q0: Initial state
q0:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Check if AL is a space
    JE      skip_char                // If space, skip it

    CMPB    AL, $'1'                 // Check if AL >= '1'
    JB      q0_check_zero            // If AL < '1', jump to q0_check_zero

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    JMP     set_state_q3             // If '1' <= AL <= '9', transition to q3

q0_check_zero:
    CMPB    AL, $'0'                 // Check if AL == '0'
    JE      set_state_q2             // If AL == '0', transition to q2

    CMPB    AL, $'-'                 // Check if AL is '-'
    JE      set_state_q1             // If '-', transition to q1

    CMPB    AL, $'+'                 // Check if AL is '+'
    JE      set_state_q1             // If '+', transition to q1

    JMP     skip_char                // If invalid character, skip it

set_state_q1:
    MOVQ    $1, BX                   // Set the next state to q1
    JMP     process_next_byte        // Process the next byte

set_state_q2:
    MOVQ    $2, BX                   // Set the next state to q2
    JMP     process_next_byte        // Process the next byte

set_state_q3:
    SUBB    $'0', AL                 // Convert ASCII to numeric value ('1'-'9' to 1-9)
    MOVB    AL, (SI)                 // Store the digit
    INCQ    SI                       // Move the output pointer
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    JMP     main_loop                // Continue processing

// State q1: Sign state
q1:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after sign
    JE      skip_char                // If space, skip it

    CMPB    AL, $'1'                 // Check if AL >= '1'
    JB      q1_check_zero            // If AL < '1', jump to q1_check_zero

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    JMP     set_state_q3             // If '1' <= AL <= '9', transition to q3

q1_check_zero:
    CMPB    AL, $'0'                 // Check if AL == '0'
    JE      set_state_q2             // If AL == '0', transition to q2

    JMP     skip_char                // If invalid character, skip it

// State q2: After reading '0' as integer part
q2:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after '0'
    JE      skip_char                // If space, skip it

    CMPB    AL, $'.'                 // Check if AL is '.'
    JE      set_state_q4             // If '.', transition to q4

    JMP     skip_char                // If invalid character, skip it

set_state_q4:
    MOVQ    $4, BX                   // Set the next state to q4
    JMP     process_next_byte        // Process the next byte

// State q3: Integer Non-Zero state
q3:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after digits
    JE      skip_char                // If space, skip it

    CMPB    AL, $'0'                 // Check if AL >= '0'
    JB      skip_char                // If AL < '0', skip it

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    SUBB    $'0', AL                 // Convert ASCII to numeric value
    MOVB    AL, (SI)                 // Store the digit
    INCQ    SI                       // Move the output pointer
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    JMP     main_loop                // Continue processing

// State q4: Decimal point state
q4:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after decimal point
    JE      skip_char                // If space, skip it

    CMPB    AL, $'0'                 // Check if AL >= '0'
    JB      skip_char                // If AL < '0', skip it

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    SUBB    $'0', AL                 // Convert ASCII to numeric value
    MOVB    AL, (SI)                 // Store the digit
    INCQ    SI                       // Move the output pointer
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    MOVQ    $6, BX                   // Transition to q6 (Fractional Non-Zero)
    JMP     main_loop                // Continue processing

// State q5: Fractional state (handling multiple decimals)
q5:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after decimal digits
    JE      skip_char                // If space, skip it

    CMPB    AL, $'0'                 // Check if AL >= '0'
    JB      skip_char                // If AL < '0', skip it

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    SUBB    $'0', AL                 // Convert ASCII to numeric value
    MOVB    AL, (SI)                 // Store the digit
    INCQ    SI                       // Move the output pointer
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    MOVQ    $6, BX                   // Transition to q6 (Fractional Non-Zero)
    JMP     main_loop                // Continue processing

// State q6: Fractional Non-Zero
q6:
    MOVB    (DX), AL                 // Load the current byte into AL

    CMPB    AL, $' '                 // Allow spaces after fractional digits
    JE      skip_char                // If space, skip it

    CMPB    AL, $'0'                 // Check if AL >= '0'
    JB      skip_char                // If AL < '0', skip it

    CMPB    AL, $'9'                 // Check if AL > '9'
    JA      skip_char                // If AL > '9', skip the character

    SUBB    $'0', AL                 // Convert ASCII to numeric value
    MOVB    AL, (SI)                 // Store the digit
    INCQ    SI                       // Move the output pointer
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    JMP     main_loop                // Continue processing

// Process the next byte
process_next_byte:
    // No additional processing needed here
    JMP     main_loop                // Continue to the main loop

// Skip invalid or non-numeric character (like spaces)
skip_char:
    INCQ    DX                       // Move the input pointer
    DECQ    CX                       // Decrement the input length
    JMP     main_loop                // Continue processing

// Handle invalid state
error_invalid_state:
    JMP     error_invalid_char       // Jump to error handler

// Handle invalid characters
error_invalid_char: // code -1 is 255 in uint8
    MOVQ    $-1, AX                  // Set error code for invalid character
    JMP     save_error

error_unexpected_decimal: // code -3 is 253 in uint8
    MOVQ    $-3, AX                  // Set error code for unexpected decimal point
    JMP     save_error

error_multiple_decimals: // code -4 is 252 in uint8
    MOVQ    $-4, AX                  // Set error code for multiple decimal points
    JMP     save_error

save_error:
    // Optionally handle error storage here
    RET

// Accept the input
accept:
    CMPQ    CX, $0                   // Ensure all input has been processed
    JNE     error_invalid_char       // If not, it's an error

    CMPQ    BX, $6                   // Check if in state q6 (Fractional Non-Zero)
    JE      done                     // If yes, accept

    CMPQ    BX, $3                   // Check if in state q3 (Integer Non-Zero)
    JE      done                     // If yes, accept

    JMP     error_invalid_char       // Else, it's an error

done:
    RET
